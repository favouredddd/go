(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-aba3efe2"],{"214fb":function(n,e,t){},3711:function(n,e,t){"use strict";t.r(e);var i=function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"content"},[t("div",{staticClass:"header"},[n._v("图片缓存")]),t("div",{staticClass:"introduce"},[n._v(n._s(n.describe))]),t("div",{staticClass:"code"},[t("div",[t("div",{staticClass:"jsTitle"},[n._v("js代码")]),t("code",{directives:[{name:"helight",rawName:"v-helight",value:n.jsCode,expression:"jsCode"}],staticClass:"hljs javascript"},[n._v(n._s(n.jsCode))]),t("div",{staticClass:"jsTitle",staticStyle:{position:"relative"}},[n._v("源码\n        "),t("div",{staticClass:"copy",on:{click:n.copy}},[n._v("一键复制")])]),t("code",{ref:"textArea",staticClass:"codeArea",attrs:{autoHeight:"true"},domProps:{innerHTML:n._s(n.originCode)}})])])])},r=[],s={data:function(){return{describe:"这是一款普通图片转换为字符串缓存的工具包",jsCode:"  import {fileToString} from 'xxxx';\n  //type 有base64(fileReader),canvas,url\n  //需要注意的是url和base64 后台需要返回blob对象,canvas要设置图片跨域支持\n  const  config={\n    url:'',\n    type:'',\n    attempt:number\n  }\n  new fileToString(config)\n  .then(r=>{})",originCode:"class Ajax {\n  constructor() {\n    let me = this\n  }\n  static init (config) {\n    let me = this\n    config.type = config.type === undefined ? 'get' : config.type\n    config.count = config.tempt;\n    switch (config.type) {\n      case 'get':\n        return me.getRequest(config)\n      case 'post':\n        return me.postRequest(config)\n    }\n  }\n  static getRequest (config) {\n    let params = config.params || {}\n    config.count = config.count === undefined ? 1 : config.count\n    let url = Object.keys(params)\n      .map(i => {\n        return i + '=' + params[i]\n      })\n      .join('&')\n    if (config.url.endsWith('?')) {\n      url = config.url + url\n    } else {\n      url = config.url + '?' + url\n    }\n    let xml = new XMLHttpRequest()\n    return new Promise((resolve, reject) => {\n      xml.onload = () => {\n        if (xml.status !== 500) {\n          resolve(xml.response)\n        } else {\n          config.count -= 1;\n          if (count > 0) {\n            return this.getRequest(config)\n          }\n        }\n      }\n      xml.onerror = () => {\n        config.count -= 1;\n        if (count > 0) {\n          return this.getRequest(config)\n        }\n      }\n      xml.open('get', url)\n      xml.responseType = 'blob'\n      xml.send(null)\n    })\n  }\n  static postRequest (config) {\n    let file = new FormData()\n    let xml = new XMLHttpRequest()\n    let progress = config.progress || function (e) { }\n    xml.onload = () => {\n      if (xml.status === 200) {\n        config.callback(xml.responseText)\n      }\n    }\n    xml.upload.onprogress = progress\n    if (config.params.constructor === Array) {\n      config.params.forEach((i, index) => {\n        file.append('file' + index, i.file)\n      })\n    } else {\n      Object.keys(config.params).forEach(i => {\n        file.append(i, config.params[i])\n      })\n    }\n    xml.open('post', config.url)\n    xml.send(file)\n  }\n}\nclass fileToString {\n  constructor(config) {\n    this.src = config.src;\n    this.attempt = config.attempt\n    switch (config.type) {\n      case 'url':\n        return this.createUrl();\n      case 'base64':\n        return this.createBase64();\n      case 'canvas':\n        return this.createCanavs();\n    }\n  }\n  createBase64 () {\n    return Ajax.init({ url: this.src, attempt: this.attempt }).then(file => {\n      return this.doCreateBase64(file)\n    })\n  }\n  createCanavs () {\n    return this.doCreateCanavs().then(img => {\n      if (!img)\n        return \"\"\n      let canvas = document.createElement(\"canvas\");\n      let ctx=canvas.getContext(\"2d\")\n      canvas.width = img.width;\n      canvas.height = img.height;\n      ctx.drawImage(img, 0,0);\n      return canvas.toDataURL()\n    })\n  }\n  doCreateCanavs () {\n    return new Promise((resolve, reject) => {\n      let img = new Image();\n      img.crossOrigin=\"anonymous\"\n      img.onload = () => {\n        resolve(img)\n      }\n      img.onerror = () => {\n        this.attempt-=1;\n        if (this.attempt > 0) {\n          return reject(this.createCanavs());\n        } else {\n          return Promise.resolve();\n        }\n      }\n      img.src=this.src\n    }).then(r => {\n      return r\n    }, r => {\n      return r\n    })\n  }\n  createUrl () {\n    return Ajax.init({ url: this.src, attempt: this.attempt })\n      .then((file) => {\n        return Promise.resolve(window.URL.createObjectURL(file))\n      });\n  }\n  doCreateBase64 (file) {\n    return new Promise((resolve, reject) => {\n      let me = this\n      let fileReader = new FileReader()\n      fileReader.onload = e => {\n        resolve(e.target.result)\n      }\n      fileReader.readAsDataURL(file)\n    })\n  }\n}\nexport default {fileToString:fileToString}\n/*const  config={\n  url:'',\n  type:'',\n  attempt:number\n}\nnew fileToString(config)\n.then(r=>{})*/"}},mounted:function(){var n=this;this.$nextTick((function(){n.$refs.textArea.style.height=n.$refs.textArea.scrollHeight+"px"}))},methods:{copy:function(){document.execCommand("copy",!1,this.$refs.textArea.select())}}},a=s,o=(t("aa96"),t("2877")),c=Object(o["a"])(a,i,r,!1,null,null,null);e["default"]=c.exports},aa96:function(n,e,t){"use strict";var i=t("214fb"),r=t.n(i);r.a}}]);
//# sourceMappingURL=chunk-aba3efe2.7c523a7a.js.map